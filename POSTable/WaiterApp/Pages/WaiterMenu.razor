<!--The HttpClient is used for accessing the WebService-->
@inject HttpClient http
<!--The NavigationManager is used for changing pages-->
@inject NavigationManager myNavigationManager
<!--The forms title-->
<h1 style="font-family: 'Brush Script MT' ">Meniu</h1>
<br />
<!--And the forms subtitle displaying the active table-->
<h2 style="font-family: 'Brush Script MT' ">Masa @WaiterController.SelectedTable.ID.ToString()</h2>
<br />

@foreach (var categoryElement in WaiterController.WaiterMenu.MenuCategories.OrderBy(x => x.CategoryOrder))
{
    <!--The base div element for the Group Display-->
    <div style="margin:2px; color:black; background-color:white; display:flex;
                        background: @(categoryElement.IsOpened ? "#66b3ff" : "rgb(255, 255, 255) transparent")"
         @onclick="@(e => DisplayCategory(categoryElement.CategoryCode))">
        <!--Each element is a simple label item-->
        <label style="margin-left:15px;margin-top:5px">
            @categoryElement.CategoryCode
        </label>
        <label style="margin-left:15px;margin-top:5px">
            @categoryElement.CategoryName
        </label>
    </div>
    @if (categoryElement.IsOpened)
    {
        <!--Then we iterate the elements in the menu item list-->
        @foreach (var item in WaiterController.WaiterMenu.MenuItems.Where(element => element.ProductCategory == categoryElement.CategoryCode))
        {
            <!--Each element will get a card with Code/Name | Price | Quantity-->
            <!--The card is bordered by a div item with a special style and a click Event-->
            <!--The card also has a dynamic back color-->
            <!--We also set the display style to flex to keep container forms and Structures-->
            <div style="margin: 2px; color: black; background-color: white; display: flex;
                                background: @(item.ProductQuantity > 0 ? "#85e085" : "rgb(255, 255, 255) transparent")"
                 @onclick="@(e => SelectItem(item.ProductCode))">
                <!--Each piece of the card is a bordered div item-->
                <!--The leftmost part of the card taking half the size contains on two lines: ProductCode and ProductName -->
                <div style="width:50%; height:inherit; float:left; border: 1px solid black; ">
                    <!--Each element is a simple label item-->
                    <label style="margin-left:15px;margin-top:5px">
                        @item.ProductCode
                    </label>
                    <!--Separated by a line break-->
                    <br />
                    <label style="margin-left:15px;margin-top:-5px">
                        @item.ProductName
                    </label>
                </div>
                <!--Then a secondary div item containing the price and quantity will take the remaining half of the form-->
                <div style="width: 50%; height: inherit; float: right; border: 1px solid black; display: flex">
                    <!--This div item will also be broken between the two remaining items: the price and the quantity-->
                    <!--First one occupying a little less than half the div and containing the price-->
                    <div style="width: 40%;float: left;border-right: 1px solid black;">
                        <!--We will bold the Price and the Currency Symbol-->
                        <h3 style="text-align: center;margin-top: 15px">
                            @item.ProductPrice @Miscellaneous.SetCurrency()
                        </h3>
                    </div>
                    <!--And the second one occupying a little over half the div and containing the quantity-->
                    <div style="width:60%; height:inherit; float: right; border-left:1px solid black;">
                        <!--We set a center div for the label object-->
                        <!--Had a few page errors for the page layout when it was a label so changed it to a div-->
                        <div style="margin-top:5px;width:inherit;text-align:center">
                            Cantitate:
                        </div>
                        <!--We set a special class div to access special styles within the div-->
                        <!--This div is an object containing two spans with special buttons for adding and substracting quantities-->
                        <div>
                            <!--the substraction span-->
                            <i class="fas fa-minus-circle fa-lg" @onclick:stopPropagation="true" @onclick="@(e => AlterQuantity(item.ProductCode, ObjectStructures.Enumerators.Enumerators.QuantityEvents.substract))" />
                            <!--the label displaying the quantity-->
                            <label style="margin-left:10px; margin-right:10px">
                                @item.ProductQuantity
                            </label>
                            <!--the addition span-->
                            <i class="fas fa-plus-circle fa-lg" @onclick:stopPropagation="true" @onclick="@(e => AlterQuantity(item.ProductCode, ObjectStructures.Enumerators.Enumerators.QuantityEvents.add))" />
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        @foreach (var selectedElement in WaiterController.WaiterMenu.MenuItems.Where(x => x.ProductCategory == categoryElement.CategoryCode && x.ProductQuantity > 0))
        {
            <!--Each selectedElement will get a card with Code/Name | Price | Quantity-->
            <!--The card is bordered by a div item with a special style and a click Event-->
            <!--The card also has a dynamic back color-->
            <!--We also set the display style to flex to keep container forms and Structures-->
            <div style="margin: 2px; color: black; background-color: white; display: flex;
                        background: @(selectedElement.ProductQuantity > 0 ? "#85e085" : "rgb(255, 255, 255) transparent")"
                 @onclick="@(e => SelectItem(selectedElement.ProductCode))">
                <!--Each piece of the card is a bordered div item-->
                <!--The leftmost part of the card taking half the size contains on two lines: ProductCode and ProductName -->
                <div style="width:50%; height:inherit; float:left; border: 1px solid black; ">
                    <!--Each selectedElement is a simple label item-->
                    <label style="margin-left:15px;margin-top:5px">
                        @selectedElement.ProductCode
                    </label>
                    <!--Separated by a line break-->
                    <br />
                    <label style="margin-left:15px;margin-top:-5px">
                        @selectedElement.ProductName
                    </label>
                </div>
                <!--Then a secondary div item containing the price and quantity will take the remaining half of the form-->
                <div style="width: 50%; height: inherit; float: right; border: 1px solid black; display: flex">
                    <!--This div item will also be broken between the two remaining items: the price and the quantity-->
                    <!--First one occupying a little less than half the div and containing the price-->
                    <div style="width: 40%;float: left;border-right: 1px solid black;">
                        <!--We will bold the Price and the Currency Symbol-->
                        <h3 style="text-align: center;margin-top: 15px">
                            @selectedElement.ProductPrice @Miscellaneous.SetCurrency()
                        </h3>
                    </div>
                    <!--And the second one occupying a little over half the div and containing the quantity-->
                    <div style="width: 60%;
                                    height: inherit;
                                    float: right;
                                    border-left: 1px solid black;">
                        <!--We set a center div for the label object-->
                        <!--Had a few page errors for the page layout when it was a label so changed it to a div-->
                        <div style="margin-top:5px;width:inherit;text-align:center">
                            Cantitate:
                        </div>
                        <!--We set a special class div to access special styles within the div-->
                        <!--This div is an object containing two spans with special buttons for adding and substracting quantities-->
                        <div>
                            <!--the substraction span-->
                            <i class="fas fa-minus-circle fa-lg" @onclick:stopPropagation="true" @onclick="@(e => AlterQuantity(selectedElement.ProductCode, ObjectStructures.Enumerators.Enumerators.QuantityEvents.substract))" />
                            <!--the label displaying the quantity-->

                            <label style="margin-left:10px; margin-right:10px">
                                @selectedElement.ProductQuantity
                            </label>
                            <!--the addition span-->
                            <i class="fas fa-plus-circle fa-lg" @onclick:stopPropagation="true" @onclick="@(e => AlterQuantity(selectedElement.ProductCode, ObjectStructures.Enumerators.Enumerators.QuantityEvents.add))"></i>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
}

    <br />
    <!--The form has two layouts for reseting the active command and for finalizing the command-->
    <button class="btn btn-mentor" @onclick="ResetSelection">Resetare Comanda</button>
    <button class="btn btn-mentor" @onclick="ValidateSelection">Vizualizare Comanda</button>
    <button class="btn btn-mentor" @onclick="ReturnToTableSelection">Inapoi la selectia mesei</button>
